version: 2
jobs:
  build:
    working_directory: /go/src/github.com/taskworld/hyper-selenium
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout

      # This makes CircleCI 2.0 able to use Docker commands.
      # - Guide: https://circleci.com/docs/2.0/building-docker-images/
      # - Reference: https://circleci.com/docs/2.0/configuration-reference/#setup_remote_docker
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Setup Docker network
          command: |
            # Set up a user-defined bridge, so that containers can talk to each other more easily.
            # - Guide: https://docs.docker.com/network/bridge/
            docker network create my-net

      - run:
          name: Start Dockerized SSH server
          command: |
            # An SSH server is required for tunneling traffic across the internet.
            # - https://github.com/rastasheep/ubuntu-sshd
            # - https://hub.docker.com/r/rastasheep/ubuntu-sshd/
            docker run -d \
              --network=my-net \
              --name=hyper-selenium-sshd \
              rastasheep/ubuntu-sshd:18.04

      - run:
          name: Build Docker image
          command: docker build -t hyper-selenium-agent .

      - run:
          name: Run Agent
          command: |
            # An Agent runs Selenium and connects to the SSH server,
            # to allow clients to use its service.
            # This Agent would be run on Hyper.sh.
            docker run -t --network=my-net --rm hyper-selenium-agent ./hyper-selenium-agent --ssh-remote=hyper-selenium-sshd:22 --id=meow
          background: true

      - run:
          name: Install dep
          command: |
            # Install `dep` so that we can install project dependencies.
            # - Guide: https://golang.github.io/dep/docs/installation.html
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

      - run:
          name: dep ensure
          command: |
            # Install dependencies using `dep`.
            # - Guide: https://golang.github.io/dep/docs/daily-dep.html
            dep ensure

      - run:
          name: Build Client Binary
          command: |
            mkdir -p build

            # Build a “static binary” for the Client.
            # This Client will be used in a Node.js environment.
            # - Guide: https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07
            env CGO_ENABLED=0 GOOS=linux \
              go build -a -v -installsuffix cgo \
              -o ./build/hyper-selenium-client \
              ./cmd/hyper-selenium-client

      # A Client connects to the SSH server and sets up port forwarding.
      - run:
          name: Run Client
          command: |
            # Create a folder for holding the downloaded videos.
            sudo mkdir -p /videos
            sudo chmod a+rwx /videos

            # Create a volume to store the client.
            docker create \
              -v /opt/hyper-selenium/bin \
              --name hyper-selenium-client-bin \
              alpine:3.4 \
              /bin/true
            docker cp \
              ./build/hyper-selenium-client \
              hyper-selenium-client-bin:/opt/hyper-selenium/bin

            # Create a volume to store the e2e stuff.
            docker create \
              -v /usr/src/app \
              --name hyper-selenium-e2e \
              alpine:3.4 \
              /bin/true
            docker cp \
              ./e2e \
              hyper-selenium-e2e:/usr/src/app

            # Create a volume to store the video file.
            docker create \
              -v /videos \
              --name hyper-selenium-videos \
              alpine:3.4 \
              /bin/true

            # Run the client
            docker run \
              --network=my-net \
              --volumes-from=hyper-selenium-client-bin \
              --volumes-from=hyper-selenium-e2e \
              --volumes-from=hyper-selenium-videos \
              circleci/node:10 \
              bash -c "cd /usr/src/app/e2e && sudo yarn && sudo chmod a+rwx /videos && /opt/hyper-selenium/bin/hyper-selenium-client --ssh-remote=hyper-selenium-sshd:22 --id=meow --video-out=/videos/video.mp4 yarn test"

            # Copy back the videos
            docker cp \
              hyper-selenium-videos:/videos/video.mp4 \
              /videos || echo "Cannot copy video..."

      # Store the downloaded video into CircleCI artifacts.
      # - Guide: https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: /videos
          destination: videos

      # Store the compiled hyper-selenium-client
      - store_artifacts:
          path: build/hyper-selenium-client
          destination: build/hyper-selenium-client
